name: Go build
run-name: Pipeline run by @${{ github.actor }} on ${{ github.ref}} ðŸš€

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4
      - id: set-matrix
        run: |
          DIRECTORIES=$(find ./go -name go.mod -exec dirname {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=${DIRECTORIES}" >> $GITHUB_OUTPUT

  doc-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: articulate/actions-markdownlint@v1
        with:
          files: |
            README.md
            CONTRIBUTING.md
            CHANGELOG.md
            */**/*.md

  golang-lint:
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      matrix:
        modules: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: 1.21
        cache: false

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        skip-pkg-cache: true
        skip-build-cache: true
        args: "--timeout=10m"
        working-directory: ${{ matrix.modules }}

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.21"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}


    - name: Go Build
      run: |
        for module in $(find go -name go.mod -exec dirname {} \;); do
          echo "Building $(basename $module) in $PWD/$module directory..."
          cd $module
          go build -v -o ./$(basename $module) ./
          cd -
        done

    - name: Go Test
      run: |
        for module in $(find go -name go.mod -exec dirname {} \;); do
          cd $module
          go test -v -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out
          cd -
        done

    - name: Test with shell
      run: |
        for module in $(find go -name go.mod -exec dirname {} \;); do
          cd $module/tests
          ./test.sh -p ../$(basename $module)
          cd -
        done
